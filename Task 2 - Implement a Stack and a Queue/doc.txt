Task 2: Implement a Stack and a Queue
This program demonstrates how to implement a stack and a queue in C. Both data structures allow basic operations like adding and deleting elements.

------------------------------
code.c 
------------------------------

Explanation


Stack Implementation:

A stack is a LIFO (Last In, First Out) data structure.
The program includes:
push(): Adds an element to the top of the stack.
pop(): Removes and returns the top element.
isStackEmpty(): Checks if the stack is empty.
displayStack(): Prints all elements in the stack.


Queue Implementation:

A queue is a FIFO (First In, First Out) data structure.
The program includes:
enqueue(): Adds an element to the end of the queue.
dequeue(): Removes and returns the front element.
isQueueEmpty(): Checks if the queue is empty.
displayQueue(): Prints all elements in the queue.


Main Function:

Provides a menu to perform stack and queue operations.
Handles user input and calls the appropriate functions.

--------------------------------------------
Sample Output

Menu:
1. Push (Stack)
2. Pop (Stack)
3. Display Stack
4. Enqueue (Queue)
5. Dequeue (Queue)
6. Display Queue
7. Exit
Enter your choice: 1
Enter value to push into stack: 10
Pushed 10 into stack.

Enter your choice: 3
Stack elements: 10

Enter your choice: 2
Popped: 10

Enter your choice: 3
Stack is empty.

-----------------------------------
Queue Operations:

Enter your choice: 4
Enter value to enqueue into queue: 20
Enqueued 20 into queue.

Enter your choice: 4
Enter value to enqueue into queue: 30
Enqueued 30 into queue.

Enter your choice: 6
Queue elements: 20 30

Enter your choice: 5
Dequeued: 20

Enter your choice: 6
Queue elements: 30


----------------------------------------
Key Points

Stack and queue are implemented using arrays.
Overflow and underflow conditions are handled properly.
Both structures provide efficient and user-friendly operations.